use std::str::FromStr;
use crate::ast::*;

grammar;

// match {
//     // r"\s*", 
//     r"//[^\n\r]*[\n\r]*", // Skip `// comments`
//     // r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/",  // Skip `/* comments */`
// }
// match {
//     r"{.*}" => {} // pascal style comment
// }
Comma<E>: Vec<E> = <v0:(<E> ",")*> <e1:E?> => v0.into_iter().chain(e1).collect();

Semicolon<E>: Vec<E> = <v0:(<E> ";")*> <e1:E?> => v0.into_iter().chain(e1).collect();

Dot<E>: Vec<E> = <v0:(<E> ".")*> <e1:E?> => v0.into_iter().chain(e1).collect();

Number: i32 = {
    // r"[-+]?[0-9]*\.?[0-9]*" => i32::from_str(<>).unwrap(),
    r"[-+]?[0-9]*" => i32::from_str(<>).unwrap(),
};

Str:String = {
    r#"["`'][a-zA-Z_][a-zA-Z0-9_]*["`']"# => String::from_str(<>).unwrap(),
}

Identifier: String = {
    r"[a-zA-Z_][a-zA-Z0-9_]*" => String::from_str(<>).unwrap()
}

Expr: Box<Expr> = {
    Expr ExprOp Factor => Box::new(Expr::Op(<>)),
    Factor,
};

ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

Factor: Box<Expr> = {
    Factor FactorOp Term => Box::new(Expr::Op(<>)),
    Term,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

Term: Box<Expr> = {
    Number => Box::new(Expr::Number(<>)),
    Str => Box::new(Expr::Str(<>)), 
    Identifier => Box::new(Expr::Variable(<>)), 
    <identifier:Identifier> "(" <exprs:Comma<Expr>> ")" => Box::new(Expr::Call(identifier, exprs)),
    "(" <Expr> ")",
    // <expr_left:Expr> "==" <expr_right:Expr>  => Expr::Equal(expr_left, expr_right),
};

Statement: Statement = {
    <identifiers:Dot<Identifier>> "=" <expr:Expr>  => Statement::Assignment(identifiers, expr),
    "var" <identifier:Identifier> ":" <var_type:Identifier> => Statement::Declare(identifier, var_type, None),
    "var" <identifier:Identifier> ":" <var_type:Identifier> "=" <expr:Expr> => Statement::Declare(identifier, var_type, Some(expr)),
    <identifier:Identifier> "(" <exprs:Comma<Expr>> ")" => Statement::Call(identifier, Box::new(exprs).to_vec()),
    "{" <statements:Semicolon<Statement>> "}" => Statement::Block(statements),
}

Prototype: Prototype = {
    "func" <identifier:Identifier> "(" <arguments:Comma<Identifier>> ")" => Prototype::new(identifier, arguments)
};
        
Function: Function = {
    <prototype:Prototype> "{" <statements:Semicolon<Statement>> "}" => Function::new(prototype, statements)
};

pub Program: Vec<Function> = <functions:Function*> => functions.into_iter().collect();


