use std::str::FromStr;
use crate::ast::*;

grammar;


Number: i32 = {
    r"[-+]?[0-9]*\.?[0-9]*" => i32::from_str(<>).unwrap()
};

Identifier: String = {
    r"[a-zA-Z_][a-zA-Z0-9_]*" => String::from_str(<>).unwrap()
}

Expr: Box<Expr> = {
    Expr ExprOp Factor => Box::new(Expr::Op(<>)),
    Factor,
};

ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

Factor: Box<Expr> = {
    Factor FactorOp Term => Box::new(Expr::Op(<>)),
    Term,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

Comma<E>: Vec<E> =
    <v0:(<E> ",")*> <e1:E?> =>
        v0.into_iter().chain(e1).collect();


Term: Box<Expr> = {
    Number => Box::new(Expr::Number(<>)),
    Identifier => Box::new(Expr::Variable(<>)), 
    <identifier:Identifier> "(" <exprs:Comma<Expr>> ")" => Box::new(Expr::Call(identifier, exprs)),
    "(" <Expr> ")",
};

Statement: Statement = {
    <identifier:Identifier> "=" <expr:Expr> => Statement::VarDef(identifier, expr),
}

// Statement:Box<Statement> = {
//     <VarDef> ";",
//     <Term> ";",
// }

Prototype: Prototype = {
    "func" <identifier:Identifier> "(" <params:Comma<Identifier>> ")" => Prototype::new(identifier, params)
};

Semicolon<E>: Vec<E> = <v0:(<E> ";")*> => v0.into_iter().collect();
        
Function: Function = {
    <prototype:Prototype> "{" <statements:Semicolon<Statement>> "}" => Function::new(prototype, statements)
};

pub Program: Vec<Function> = 
    <functions:Function*> => functions.into_iter().collect();

